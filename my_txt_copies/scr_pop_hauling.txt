/// scr_pop_hauling.gml
///
/// Purpose:
///   Manages the behavior of a pop when it is in the HAULING state.
///   The pop will find a designated drop-off location (obj_structure_gatheringHut),
///   move to it, and deposit all haulable items from its inventory into the
///   global lineage stock.
///
/// Metadata:
///   Summary:       Pop behavior script for hauling items to a drop-off.
///   Usage:         Called by scr_pop_behavior when obj_pop.state == PopState.HAULING.
///                  Executed in the context of an obj_pop instance.
///   Parameters:    none (operates on 'self')
///   Returns:       void
///   Tags:          [pop_behavior][hauling][inventory][resource_management][ai]
///   Version:       1.0 - [Current Date]
///   Dependencies:  obj_pop instance variables (inventory_items, target_object_id, travel_point_x/y, state),
///                  obj_structure_gatheringHut (object type for drop-off),
///                  Item enum (scr_items.gml), get_item_data() (scr_items.gml),
///                  Global lineage stock variables (e.g., global.lineage_food_stock),
///                  PopState enum.

// This script is intended to be called from scr_pop_behavior like:
// case PopState.HAULING:
//     scr_pop_hauling();
// break;

function scr_pop_hauling() {
    // This script runs in the context of an obj_pop instance (self)

    // =========================================================================
    // 0. INITIAL CHECKS & SETUP (If entering state for the first time)
    // =========================================================================
    // If target_object_id is noone, it means we just entered HAULING state or lost our target.
    // We need to find a drop-off point.
    if (target_object_id == noone || !instance_exists(target_object_id) || target_object_id.object_index != obj_structure_gatheringHut) {
        // Check if pop has anything to haul
        if (!variable_instance_exists(id, "inventory_items") || ds_list_empty(inventory_items)) {
            show_debug_message($"Pop {id} ({pop_name}) in HAULING state but has empty inventory. Switching to IDLE.");
            state = PopState.IDLE;
            exit; // Nothing to haul
        }

        // Find the nearest gathering hut
        target_object_id = instance_nearest(x, y, obj_structure_gatheringHut);

        if (!instance_exists(target_object_id)) {
            show_debug_message($"Pop {id} ({pop_name}) in HAULING state: No obj_structure_gatheringHut found. Waiting or Idling.");
            // What to do if no hut exists? For now, switch to WAITING.
            // Could also make them wander or try again later.
            state = PopState.WAITING;
            is_waiting = true; // Ensure it waits
            exit;
        } else {
            show_debug_message($"Pop {id} ({pop_name}) found gathering hut {target_object_id} to haul to.");
            // Set travel point to the hut's location (or an interaction slot if it had one)
            travel_point_x = target_object_id.x;
            travel_point_y = target_object_id.y;
            // Ensure sprite is walking
            if (script_exists(scr_update_walk_sprite)) { // Assuming you have this script
                scr_update_walk_sprite(direction); // Set correct walking sprite based on movement direction
            } else if (sprite_index != spr_man_walk) { // Fallback if scr_update_walk_sprite doesn't exist
                sprite_index = spr_man_walk;
                image_speed = 1;
            }
        }
    }

    // =========================================================================
    // 1. MOVEMENT TO TARGET DROP-OFF (Gathering Hut)
    // =========================================================================
    // If we have a target hut, move towards it.
    if (instance_exists(target_object_id)) {
        var _dist_to_target = point_distance(x, y, travel_point_x, travel_point_y);
        var _arrival_threshold = 64; // How close to get before considering "arrived"

        if (_dist_to_target > _arrival_threshold) {
            // Move towards the target
            // mp_linear_step or move_towards_point can be used.
            // Simple movement:
            var _dir = point_direction(x, y, travel_point_x, travel_point_y);
            var _move_speed = pop.base_speed / 1.2 ; // TODO: Make weight adjust this to be slower?

            x += lengthdir_x(_move_speed, _dir);
            y += lengthdir_y(_move_speed, _dir);
            
            // Update sprite direction
            direction = _dir; // Update instance direction for sprite
			scr_update_walk_sprite()
             
        } else {
            // --- Arrived at the Gathering Hut: Perform Drop-off ---
            show_debug_message($"Pop {id} ({pop_name}) arrived at gathering hut {target_object_id}. Dropping off items.");
            speed = 0; // Stop moving
            if (sprite_index != spr_man_idle) { // Switch to idle/working animation
                sprite_index = spr_man_idle; // Or a specific "depositing" animation
                image_index = 0;
            }

            // Iterate through pop's inventory and add to global stock
            if (variable_instance_exists(id, "inventory_items") && !ds_list_empty(inventory_items)) {
                for (var i = ds_list_size(inventory_items) - 1; i >= 0; i--) { // Iterate backwards if removing
                    var item_stack_struct = inventory_items[| i];
                    var item_enum = item_stack_struct.item_id_enum;
                    var item_qty = item_stack_struct.quantity;
                    var item_data = get_item_data(item_enum);
                    
                    if (item_data != undefined) {
                        show_debug_message($"Pop {id} dropping off {item_qty} of {item_data.name}.");
                        // Add to appropriate global stock based on item type or specific enum
                        // This part needs to be robust based on your global variable names and item categories
                        switch (item_enum) {
                            case Item.FOOD_RED_BERRY:
                                global.lineage_food_stock += item_qty;
                                break;
                            case Item.MATERIAL_WOOD:
                                global.lineage_wood_stock += item_qty;
                                break;
                            case Item.MATERIAL_STONE:
                                global.lineage_stone_stock += item_qty;
                                break;
                            case Item.MATERIAL_METAL_ORE: // Assuming you added this global
                                global.lineage_metal_stock += item_qty;
                                break;
                            // Add cases for other haulable items
                            default:
                                show_debug_message($"Item {item_data.name} is not designated for global stock in hauling script.");
                                // Optionally, don't remove it from inventory if it's not stockable
                                // For now, we assume all items in inventory are being hauled to general stock
                                break;
                        }
                    }
                }
                // Clear the pop's inventory after dropping everything off
                ds_list_clear(inventory_items); 
                // self.current_inventory_weight = 0; // Reset if using weight system
                show_debug_message($"Pop {id} ({pop_name}) inventory cleared after hauling.");
            }

            // Hauling complete, reset target and change state
            target_object_id = noone;
			var _new_travel_x = x + 100; 
            var _new_travel_y = y + 100;
			
			                // Set pop to move to this new "waiting spot"
            travel_point_x = _new_travel_x;
            travel_point_y = _new_travel_y;
			
			state = PopState.COMMANDED; // Go to COMMANDED to execute the small move
            is_waiting = false;         // Not waiting yet, it's moving
            has_arrived = false;        // Needs to arrive at this new step-away spot
			
            state = PopState.WANDERING; // Or PopState.WAITING if you prefer
            show_debug_message($"Pop {id} ({pop_name}) finished hauling, switching to {state}.");
        }
    } else {
        // Target hut was destroyed or became invalid mid-transit
        show_debug_message($"Pop {id} ({pop_name}) lost target gathering hut. Resetting HAULING state.");
        target_object_id = noone; // Force re-evaluation on next HAULING step or switch state
        state = PopState.IDLE;    // Or WAITING
    }
}